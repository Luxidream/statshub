library(luxipackage)
library(luxipackage)
library(luxipackage)
pacplot <- function(x){
quad.lm$coef[1] +quad.lm$coef[2]*x  + quad.lm$coef[3]*x^2
}
library(luxipackage)
?pacplot
??pacplot
library(luxipackage)
?pacplot
library(luxipackage)
?luxipackage
pacplot <- function(x){
quad.lm$coef[1] +quad.lm$coef[2]*x  + quad.lm$coef[3]*x^2
}
library(luxipackage)
#* Function package
#*
#* Contains an example function from Lab 4
#*
#* @docType package
#*
#* @author Dzuy Nguyen \email{dzuynguyen219@gmail.com}
#*
#* @name luxipackage
?luxipackage
#* Function package
#*
#* Contains an example function from Lab 4
#*
#* @docType package
#*
#* @author Dzuy Nguyen \email{dzuynguyen219@gmail.com}
#*
library(luxipackage)
#* Myplot function to plot quadratic from coefficients
#*
#* @param x Numeric vector with three coefficients
#*
#* @return Vector with line to plot
#*
#* @examples N/A
pacplot <- function(x){
library(luxipackage)
pacplot
plot(pacplot)
detach("package:luxipackage", unload = TRUE)
library(luxipackage)
library(luxipackage)
library(luxipackage)
library(luxipackage)
library(luxipackage)
library(luxipackage)
library(luxipackage)
library(luxipackage)
pacplot <- function(x){
quad.lm$coef[1] +quad.lm$coef[2]*x  + quad.lm$coef[3]*x^2
}
library(luxipackage)
library(luxipackage)
library(luxipackage)
library(luxipackage)
??pacplot
?pacplot
library(luxipackage)
?bmi3
library(luxipackage)
?pacplot
library(luxipackage)
?pacplot
library(luxipackage)
dbinom(size=10, p=0.5)
dbinom(x=6, size=10, p=0.5)
ppbinom(x=6, size=10, p=0.5)
pbinom(x=6, size=10, p=0.5)
pbinom(6, size=10, p=0.5)
1 - pbinom(6, size=10, p=0.5)
dbinom(x=4, size=10, p=0.5) + dbinom(x=5, size=10, p=0.5) + dbinom(x=6, size=10, p=0.5)
pbinom(7, size=10, p=0.5)
library(luxipackage)
library(luxipackage)
library(luxipackage)
library(luxipackage)
library(luxipackage)
CPU = read.csv("CPU.csv")
setwd("~/MATH 4753/Labs/Lab 1")
CPU = read.csv("CPU.csv")
head(CPU)
pnorm(16, mean=15, sd=3) - pnorm(10, mean=15, sd=3, lower.tail=FALSE)
library(luxipackage)
#This is a model R function that you can alter for other statistics
# Copy this function twice and alter the two copies to make sampling distributions from the T distribution
mychisim<-function(n1=10,sigma1=3,mean1=5,iter=1000,ymax=0.1,...){    # adjust ymax to make graph fit
y1=rnorm(n1*iter,mean=mean1,sd=sigma1)# generate iter samples of size n1
data1.mat=matrix(y1,nrow=n1,ncol=iter,byrow=TRUE) # Each column is a sample size n1
ssq1=apply(data1.mat,2,var) # ssq1 is s squared
w=(n1-1)*ssq1/sigma1^2      #chi-sq stat
hist(w,freq=FALSE, ylim=c(0,ymax), # Histogram with annotation
main=substitute(paste("Sample size = ",n[1]," = ",n1," statistic = ",chi^2)),
xlab=expression(paste(chi^2, "Statistic",sep=" ")), las=1)
lines(density(w),col="Blue",lwd=3) # add a density plot
curve(dchisq(x,n1-1),add=TRUE,col="Red",lty=2,lwd=3) # add a theoretical curve
title=expression(chi^2==frac((n[1]-1)*s^2,sigma^2)) #mathematical annotation -see ?plotmath
legend(locator(1),c("Simulated","Theoretical"),col=c("Blue","Red"),lwd=4,lty=1:2,bty="n",title=title) # Legend #
return(list(w=w,summary=summary(w),sd=sd(w),fun="Chi-sq")) # some output to use if needed
}
windows()
chisq=mychisim(iter=10000,ymax=0.15)
fire = read.csv(FIREDAM.csv)
fire = read.csv(file.choose())
usethis::use_data(fire)
